# Stage 1: Compile the planner
Bootstrap: docker
From: ubuntu:22.04
Stage: build

%files
    planners /planners

%setup
    #!/bin/bash
    CPLEX_FILE="$IPC_THIRD_PARTY/cplex_studio2211.linux_x86_64.bin"
    if [ -f "$CPLEX_FILE" ]; then
        cp "$CPLEX_FILE" ${APPTAINER_ROOTFS}/cplex.bin
    else
        if [ -z "$DISABLE_DECSTAR_ONE" ]; then
            echo
            echo "ERROR: you need to provide a CPLEX installer to run the IPC version of Ragnarok. \
Please see the instructions on the IPC 2023 webpage on how to build the planner with CPLEX (https://ipc2023-classical.github.io/). \
Without CPLEX, the decoupled-search component (DecStar-1) is not working. \
If you want to run Ragnarok without that component, you can define an environment variable as follows: \
export DISABLE_DECSTAR_ONE=1; \
The planner will then build and run without DecStar-1."
            echo
            exit 1
        fi
    fi

%post
    #!/bin/bash

    ## Install all dependencies.
    apt-get update
    apt-get -y install --no-install-recommends cmake g++ make pypy3 autoconf automake default-jre-headless zlib1g-dev autotools-dev bison ca-certificates flex gdb libboost-dev libboost-program-options-dev

    ## Clear local build directories.
    rm -rf /planners/*/builds

    if [ -f "cplex.bin" ]; then
        ## Build CPLEX
        chmod +x ./cplex.bin
        ./cplex.bin -DLICENSE_ACCEPTED=TRUE -i silent

        export DOWNWARD_CPLEX_ROOT=/opt/ibm/ILOG/CPLEX_Studio2211/cplex/
        export DOWNWARD_CPLEX_CONCERT64=/opt/ibm/ILOG/CPLEX_Studio2211/concert/
    else
        # Create empty dirs so copying the folders in stage 2 does not fail.
        mkdir -p /opt/ibm/ILOG/CPLEX_Studio2211/cplex/
        mkdir -p /opt/ibm/ILOG/CPLEX_Studio2211/concert/
    fi

    ## Build bliss
    cd planners/decstar/third-party/bliss-0.73
    make clean
    make
    make lib
    export PATH="/planners/decstar/third-party/bliss-0.73:$PATH"
    cd ../../../..

    ## Build planners.
    for planner in decstar scorpion symk powerlifted; do
        cd /planners/${planner}
        pypy3 build.py
    done

    ## Strip binaries (shell globs don't work).
    strip --strip-all /planners/decstar/builds/release64/bin/downward
    strip --strip-all /planners/scorpion/builds/release/bin/downward /planners/scorpion/builds/release/bin/preprocess-h2
    strip --strip-all /planners/symk/builds/release/bin/downward
    strip --strip-all /planners/powerlifted/builds/release/search/search

# Stage 2: Run the planner
Bootstrap: docker
From: ubuntu:22.04
Stage: run

%files
    plan.py
    driver

%files from build
    /opt/ibm/ILOG/CPLEX_Studio2211/cplex/
    /opt/ibm/ILOG/CPLEX_Studio2211/concert/

    /planners/decstar/builds/release64/bin/downward /planners/decstar/builds/release/bin/downward
    /planners/decstar/third-party/bliss-0.73/

    /planners/scorpion/driver
    /planners/scorpion/fast-downward.py
    /planners/scorpion/builds/release/bin
    # /driver/run_components.py points to the src directory.
    /planners/scorpion/src/translate

    /planners/symk/builds/release/bin/downward

    /planners/powerlifted/driver
    /planners/powerlifted/powerlifted.py
    /planners/powerlifted/builds/release/search
    /planners/powerlifted/builds/release/translator

%post
    #!/bin/bash

    apt-get update
    apt-get -y install --no-install-recommends pypy3 libboost-dev libboost-program-options-dev
    apt-get clean
    rm -rf /var/lib/apt/lists/*

%runscript
    #!/bin/bash

    DOMAINFILE="$1"
    PROBLEMFILE="$2"
    PLANFILE="$3"

    # Limit memory to 7.5 GiB to enable switching away from components that run out of memory.
    # Go even further down to 6G because of the apptainer overhead.
    pypy3 /plan.py \
        --overall-memory-limit 6G \
        --overall-time-limit 30m \
        --translate-time-limit 15m \
        --transform-task /planners/scorpion/builds/release/bin/preprocess-h2 \
        --transform-task-options h2_time_limit,180 \
        --alias seq-opt-ragnarok \
        --plan-file "$PLANFILE" \
        "$DOMAINFILE" "$PROBLEMFILE" || (pypy3 /planners/powerlifted/powerlifted.py -d "${DOMAINFILE}" -i "${PROBLEMFILE}" -s "bfs" -e "blind" -g "automatic" --state "sparse" --time-limit "1800" && mv plan "${PLANFILE}")

%labels
Name        Ragnarok
Description Sequential portfolio of optimal planners developed at Linköping University
Authors     Dominik Drexler <dominik.drexler@liu.se>, Daniel Gnad <daniel.gnad@liu.se>, Paul Höft <paul.hoft@liu.se>, Jendrik Seipp <jendrik.seipp@liu.se>, David Speck <david.speck@liu.se>, Simon Ståhlberg <simon.stahlberg@liu.se>
License     GPL 3
Tracks      optimal
SupportsDerivedPredicates                       yes
SupportsUniversallyQuantifiedPreconditions      yes
SupportsExistentiallyQuantifiedPreconditions    yes
SupportsUniversallyQuantifiedEffects            yes
SupportsNegativePreconditions                   yes
SupportsEqualityPreconditions                   yes
SupportsInequalityPreconditions                 yes
SupportsConditionalEffects                      yes
SupportsImplyPreconditions                      yes
